'''
Dawn Sumner, July 2014, Djerassi

emblems are the small objects that rise in the center of the vortex, which can be selected by the participant

'''

from dreamvortex.engines.engine import BaseItem, BaseEngine
from dreamvortex.vortex import Vortex
from dreamvortex import settings, get_dream

from vroom.rendering.buffers import Buffer
from vroom.core.color import color, white

from math import sin, cos, pi
from random import random, randint
import os

###################
class Emblem(BaseItem):
   
   def __init__(self, lifetime, vortex):
      BaseItem.__init__(self, lifetime, vortex)

      self.points = []
      self.coords = []
      
      self.history = 1
      self.height = 0.5

      self.color = [1.0, 1.0, 1.0, 0.0]
      self.texture = get_dream()   # need to add get_emblem() to dreamvortex __init__
      
      self.vortex.a = 1.      # to put the emblem in the middle of the vortex
      self.vortex.b = 0
#      self.vortex.z_step = self.vortex.z_step/5.         # to make it rise slowly
#      self.vortex.theta_step = self.vortex.theta_step/5. # to make it rise slowly

      self.initialize()      
      self.step()

   def initialize(self):

      # z_b, z_t used to place the strip below the floor & have it emerge
      z_b = -2*self.height
      z_t = 0.

      self.points.append([0.5, 0.5, z_b])
      self.points.append([0.5, 0.5, z_t])
      self.points.append([-0.5, -0.5, z_b])
      self.points.append([-0.5, -0.5, z_t])

      self.coords.append([0.0, 0.0])
      self.coords.append([0.0, 1.0])
      self.coords.append([1.0, 0.0])
      self.coords.append([1.0, 1.0])
      
      self.vortex.pos = [0.0, 0.0, -2.*self.height]
#      print self.points[0], self.points[1]

   def step(self):
#      self.vortex.step()
      x,y,z = self.vortex.step()

      self.points.append([x, y, z-self.height])
      self.points.append([x, y, z+self.height])
      self.points.pop(0)
      self.points.pop(0)   # need pop twice (empirically)

      self.buffer = Buffer(self.points)
      self.buffer.loadTexCoordData(self.coords)
      self.buffer.renderMode('triangles:strip')

   def draw(self):
      color(self.color)
      self.buffer.draw(style='solid')

##################
class EmblemEngine(BaseEngine):

   def __init__(self):
      BaseEngine.__init__(self)
      
      self.particles = []

   def add_particle(self):
      self.particles.append(Emblem(randint(400, 800), Vortex.random_vortex()))

   def draw(self):
#      if not len(self.particles):
#         return 

      for particle in self.particles:
         print particle.texture
         particle.texture.bind()
         particle.draw()
         particle.texture.unbind()
         
   def spawn(self):
      if random() < 0.07:    
         self.add_particle()


#!/usr/bin/env vroom-wrapper

'''
Dawn Sumner, Djerassi, July 2014
Working to be able to select an object and do something with it.  
Based heavily on drag.vroom.

need to make the defs from drag responsive to the different objects - need a wrapping structure to do so...
'''
from vroom import *
import vroom.extra.PLY
from math import sqrt

# Functions

def hit(pos_obj, cursor):
   dist = sum([(a-b)*(a-b) for a,b in zip(pos_obj, cursor)])
   return sqrt(dist) < Global.size
   
def button0(pos):
   print 'button 0'
   
def button1(pos):
   print 'button 1'
      

# vroom callbacks

def init():

   Global.emblem = []
   Global.num = 2

   Global.size = 0.5
 
   Global.dragging = []
   Global.hover = []
   Global.color = []
   x, y, z = 0., 0., 0.

   for i in range(Global.num):
      Global.emblem.append([x,y,z])
      Global.dragging.append(False)
      Global.hover.append(False)
      c = float(i)/float(Global.num)
      Global.color.append([0.5*c, 0., c])
      x += 1.
      z += 1.
      
def frame(): pass

def display():

   for i in range(Global.num):
      if Global.dragging[i]:
         color(red)
      elif Global.hover[i]:
         color(green)
      else:
         color(blue)
   
      pushMatrix()
      translate(Global.emblem[i])
      sphere(Global.size)
      popMatrix()

def button_press(pos, button):      
   print 'button_press: pos={}'.format(pos)

   for i in range(len(Global.emblem)):  
      if hit(Global.emblem[i],pos):
         print '!!!!! HIT !!!!!'
         Global.dragging[i] = True
    
def button_release(pos, button):
   print 'button_release: pos={}'.format(pos)

   for i in range(len(Global.emblem)):  
      Global.dragging[i] = False

def motion(pos, button):
   for i in range(len(Global.emblem)):  
      if Global.dragging[i]:
        Global.emblem[i] = pos
      else:
         Global.hover[i] = hit(Global.emblem[i], pos) 


#!/usr/bin/env vroom-wrapper
'''
Start of second view after selection of an emblem from the vortex
Djerassi, July 2014, Dawn
Based on vortex-image-dynamic.vroom

NOW ADDING use of the vroom_objects class for all the objects in the scene
'''

from vroom import *

from dreamvortex.engines.dream import DreamEngine
from dreamvortex import settings, load_dreams
from dreamvortex.vroom_objects import GraphicalObjects
from dreamvortex.environment import draw_floor

@LiveCoding.no_update
def init():
   Global.elements = GraphicalObjects()
   Global.elements.append(DreamEngine())
   
   Global.scale = settings['scale']
   Global.trans = [settings['x-offset'], settings['y-offset'], \
                  settings['z-offset']]

def gl_init():
   
   # Textures
   load_dreams()
   Global.floor_texture = Texture.from_file(get_resource( \
         'floors/DV_Source3_Darker_Blur.png'))
         
   # enable tracking of the dreams so they can be dragged around

def frame():
   # old, simple:
   Global.elements.step()
   
   # Make chosen dream appear on the floor, associated dreams appear

def display():
   lighting(False)
   
   pushMatrix()
   translate(Global.trans)    # moves vortex to a good place on TV
   scale(Global.scale)        # makes the vortex a good scale
#   rotateY(90)                # to make the vortex fill the TV sideways
   
   draw_floor(Global.floor_texture)

   # Draw Dreams
   glDisable(GL_CULL_FACE)
   transparency(True)
   Global.elements.draw()
   
   popMatrix()
   
def draw_floor():
   # a grid
   color(0.3) 

#   draw(grid, 40, 40, 20, 20).at([-20, -20, 0])

   # an image
   points = [[-50.,-50., 0.],[50., -50., 0.],[-50., 50., 0.],[50.,50.,0.]]
   coords = [[0.,0.],[1.,0.],[0.,1.],[1.,1.]]
   floor = Buffer(points)
   floor.loadTexCoordData(coords)
   floor.renderMode('triangles:strip')
   
   transparency(True)
   color(1.0)
   Global.floor_texture.bind()
   floor.draw(style='solid')
   Global.floor_texture.unbind()



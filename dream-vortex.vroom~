#!/usr/bin/env vroom-wrapper
#
# NAME: dream-vortex.vroom
#

#from WavPlay import InitWavPlay,RandPlay,PlayThis

from vroom import *

from dreamvortex import settings, load_dreams, load_strips

from dreamvortex.engines.particle import ParticleEngine
from dreamvortex.engines.strip import StripEngine
from dreamvortex.engines.dream import DreamEngine

from dreamvortex.vortex import Vortex
from dreamvortex.WavPlay import InitWavPlay, RandPlay

from math import sin, cos, pi
from random import random, randint
import os

# Vroom Callbacks

#@LiveCoding.no_update
def init():
   Global.strip = StripEngine()
   Global.particles = ParticleEngine()
   Global.dreams = DreamEngine()
   
   Global.scale = settings['scale']
   Global.trans = [settings['x-offset'], settings['y-offset'], \
                  settings['z-offset']]
                  
   InitWavPlay(20)

def gl_init():
   load_dreams()  # to show dreams static in vortex
   load_strips()  # to put dreams on strips

   Global.floor_texture = Texture.from_file(get_resource( \
         'floors/DV_Source3_188Ftr.png'))

#   Global.brush_texture = Texture.from_file(get_resource('brush-white.png'))

def frame():
   Global.strip.step()
   Global.particles.step()
   Global.dreams.step()

def display():
   lighting(False)
   
   pushMatrix()
   translate(Global.trans)    # moves vortex to a good place on TV
   scale(Global.scale)        # makes the vortex a good scale
   
   draw_floor()
#   draw_dreams()
   draw_strip()
   
   translateZ(1.5)      # draws the particles slightly above the floor
   draw_particles()
   
   popMatrix()

################################
# Functions

def draw_floor():
   # a grid
   #color is a special vroom command; needed to avoid openGL problems
#   color(0.3) 

#   draw(grid, 40, 40, 20, 20).at([-20, -20, 0])

   # a cube
   pushMatrix()
   translate(-20, -20, -50)
#   cube(40.0, style='solid')
   popMatrix()

   # an image
#   z = settings['z-offset']
   z = 0.
   
   points = [[-50.,-50., z],[50., -50., z],[-50., 50., z],[50.,50.,z]]
   coords = [[0.,0.],[1.,0.],[0.,1.],[1.,1.]]
   floor = Buffer(points)
   floor.loadTexCoordData(coords)
   floor.renderMode('triangles:strip')
   
   color(1.0)
   Global.floor_texture.bind()
   floor.draw(style='solid')
   Global.floor_texture.unbind()

def draw_strip():
   transparency(True)

   glBlendFunc(GL_SRC_ALPHA, GL_ONE); 

   # the following 3 lines are necessary to get backs drawn on strips
   glDepthMask(GL_FALSE)     
   glDisable(GL_CULL_FACE)
   glCullFace(GL_BACK)

   Global.strip.draw()

def draw_strip_orig():    # may not work due to changes in engines.vortex
   transparency(True)

   Global.brush_texture.bind()

   glDepthMask(GL_FALSE)
   glDisable(GL_CULL_FACE)

   Global.strip.draw()

   Global.brush_texture.unbind()

def draw_particles():
   Global.particles.draw()

def draw_dreams():
#   transparency(True)
   transparency(False)

   glDisable(GL_CULL_FACE)

   Global.dreams.draw()

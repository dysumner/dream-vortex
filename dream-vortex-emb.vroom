#!/usr/bin/env vroom-wrapper
#
# NAME: dream-vortex.vroom
#

#from dreamvortex.WavPlay import InitWavPlay,RandPlay,PlayThis

from vroom import *
import vroom.extra.PLY

from dreamvortex import settings, load_dreams, load_strips, load_emblems_flat

from dreamvortex.engines.particle import ParticleEngine
from dreamvortex.engines.strip import StripEngine
from dreamvortex.engines.dream import DreamEngine
from dreamvortex.engines.emblem_flat import EmblemFlatEngine
#from dreamvortex.engines.emblem import EmblemEngine

from dreamvortex.vortex import Vortex
from dreamvortex.WavPlay import InitWavPlay, RandPlay

from math import sin, cos, pi
from random import random, randint
import os

# Vroom Callbacks

#@LiveCoding.no_update
def init():
   Global.strip = StripEngine()
   Global.particles = ParticleEngine()
   Global.dreams = DreamEngine()
#   Global.emblems_flat = EmblemFlatEngine()
#   Global.emblems = EmblemEngine()
   
   Global.scale = settings['scale']
   Global.trans = [settings['x-offset'], settings['y-offset'], \
                  settings['z-offset']]
                  
   InitWavPlay(50)
   
   #for emblem
   filename = get_resource('emblems/shoe.ply')
   Global.mesh = Mesh.from_ply(filename, True)  
   Global.z = -15.
   Global.mesh.move_to = [0.,0.,Global.z]
   Global.theta = 90.
   

def gl_init():
   load_dreams()  # to show dreams static in vortex
   load_strips()  # to put dreams on strips
#   load_emblems_flat()  # to put dreams on flat emblems
#   load_emblems()   # to put meshes on emblems

   Global.floor_texture = Texture.from_file(get_resource( \
         'floors/DV_Source3_Darker_Blur.png'))

   #for emblem
   Global.mesh.enable_tracking()   
   
def frame():
   Global.strip.step()
   Global.particles.step()
   Global.dreams.step()
#   Global.emblems_flat.step()
#   Global.emblems.step()

   #for emblem
   step(Global.mesh)
   
def display():

   #for emblem
   transparency(False)
   lighting(True)
   material(red)
   style = 'solid'

   pushMatrix()
   rotateZ(Global.theta)
   translate([0.,0.,Global.z])
   Global.mesh.draw(style=style)
   
   popMatrix()
   

   lighting(False)
   
   pushMatrix()
   translate(Global.trans)    # moves vortex to a good place on TV
   scale(Global.scale)        # makes the vortex a good scale
#   rotateY(90)                # to make the vortex fill the TV sideways
   
   draw_floor()
#   draw_dreams()
   draw_strips()
#   draw_emblems_flat()
#   draw_emblems()
   
   translateZ(1.5)      # draws the particles slightly above the floor
   draw_particles()
   
   popMatrix()
   

################################
# Functions
def step(mesh):
   Global.z += 0.005   
   if Global.z > 17: Global.z = -5
   Global.theta += .5
   
def draw_floor():
   # a grid
   color(0.3) 

#   draw(grid, 40, 40, 20, 20).at([-20, -20, 0])

   # an image
   points = [[-50.,-50., 0.],[50., -50., 0.],[-50., 50., 0.],[50.,50.,0.]]
   coords = [[0.,0.],[1.,0.],[0.,1.],[1.,1.]]
   floor = Buffer(points)
   floor.loadTexCoordData(coords)
   floor.renderMode('triangles:strip')
   
   transparency(True)
   color(1.0)
   Global.floor_texture.bind()
   floor.draw(style='solid')
   Global.floor_texture.unbind()

def draw_strips():
   transparency(True)

   glBlendFunc(GL_SRC_ALPHA, GL_ONE); 

   # the following 3 lines are necessary to get backs drawn on strips
   glDepthMask(GL_FALSE)     
   glDisable(GL_CULL_FACE)
   glCullFace(GL_BACK)

   Global.strip.draw()

def draw_particles():
   Global.particles.draw()
   
def draw_emblems_flat():
   transparency(True)

   glBlendFunc(GL_SRC_ALPHA, GL_ONE); 

   glDepthMask(GL_FALSE)     
   glDisable(GL_CULL_FACE)
   glCullFace(GL_BACK)
   
#   Global.emblems_flat.draw()

def draw_emblems():     # not tested yet
   transparency(False)
   style = 'solid'
   
#   Global.emblems.draw()

def draw_dreams():
   transparency(True)

   glDisable(GL_CULL_FACE)

   Global.dreams.draw()
